package classPenTest;

import main.classPen.Pen;
import org.testng.annotations.Test;

import static org.testng.Assert.*;

/**
 * Created by User on 24.11.2015.
 */
public class PenTest {

   @Test(expectedExceptions = Exception.class)
    public void PenTestNegativeInkContainerValueException() {
        Pen pen = new Pen(-1);
    }

    @Test(expectedExceptions = Exception.class)
    public void PenTestInkContainerValueNegativeSizeLetterException() {
        Pen pen = new Pen(1, -1);
    }

    @Test(expectedExceptions = Exception.class)
    public void PenTestInkContainerValueNegativeSizeLetterColorException() {
        Pen pen = new Pen(1, -1, "Orange");
    }

    @Test(expectedExceptions = Exception.class)
    public void PenTestNegativeInkContainerValueSizeLetterColorException() {
        Pen pen = new Pen(-1, 1, "Orange");
    }

    @Test
    public void isWorkTestPositiveMax() {
        Pen pen = new Pen(Integer.MAX_VALUE);
        boolean t = pen.isWork();
        assertEquals(t, true);
    }

    @Test
    public void isWorkTestNegativeZero() {
        Pen pen = new Pen(0);
        boolean t = pen.isWork();
        assertEquals(t, false);
    }

    @Test
    public void isWorkTestNegativeMin() {
        Pen pen = new Pen(Integer.MIN_VALUE);
        boolean t = pen.isWork();
        assertEquals(t, false);
    }

    @Test
    public void writeTestIsWorkCondition() {
        Pen pen = new Pen(-1);
        assertEquals(pen.write("a"), "");
    }

    @Test
    public void writeTestPartOfWord() {
        Pen pen = new Pen(4, 0.5);
        assertEquals(pen.write("aabbccddee"), "aabbccdd");
    }

    @Test
    public void writeTestWholeWordEqualInkContainerValue() {
        Pen pen = new Pen(10, 2);
        assertEquals(pen.write("abcde"), "abcde");
    }

    @Test
    public void writeTestWholeWordMoreInkContainerValue() {
        Pen pen = new Pen(100, 2);
        assertEquals(pen.write("abcde"), "abcde");
    }

    @Test
    public void writeTestEmptyWord() {
        Pen pen = new Pen(10, 2);
        assertEquals(pen.write(""), "");
    }

    // если SizeOfWord дробное, получаем правильно округленную часть слова
    @Test
    public void writeTestDoubleSizeOfWordRoundDown() {
        Pen pen = new Pen(4, 0.7);
        assertEquals(pen.write("aaabbbccc"), "aaabbb");
    }

    @Test
    public void writeTestDoubleSizeOfWordRoundUp() {
        Pen pen = new Pen(4, 0.5);
        assertEquals(pen.write("aaabbbccc"), "aaabb");
    }

    @Test
    public void getColorTest() {
        Pen pen = new Pen(10, 2, "red");
        assertEquals(pen.getColor(), "red");
    }
}